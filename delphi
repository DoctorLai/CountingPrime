program delphi;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.Math,
  System.Classes,
  System.Threading,
  System.SysUtils;

const
  MAXN = 10000000;

var
  i, s, starttime, serial, parallel1, parallel2, parallel3: integer;

function IsPrime(x: Integer): Integer;
var
  i, q: integer;
begin
  if (x <= 1) then
  begin
    Exit(0);
  end;
  q := Floor(Sqrt(x));
  for i := 2 to q do
  begin
    if (x mod i = 0) then
    begin
      Exit(0);
    end;
  end;
  Exit(1);
end;

function Test(left, right: Integer): Integer;
var
  i, mid, lefts, rights: Integer;
  job_left, job_right: ITask;
begin
  if (right - left <= 500) then
  begin
    Result := 0;
    for i := left to right do
    begin
      Inc(Result, IsPrime(i));
    end;
  end
  else
  begin
    mid := left + (right - left) div 2;
    lefts := 0;
    rights := 0;
    job_left := TTask.Create(
      procedure()
      begin
        lefts := Test(left, mid);
      end
    );
    job_right := TTask.Create(
      procedure()
      begin
        rights := Test(mid + 1, right);
      end
    );
    job_left.Start;
    job_right.Start;
    TTask.WaitForAll([job_left, job_right]);
    Result := lefts + rights;
  end;
end;

function Test2: integer;
var
  s: integer;
begin
  s := 0;
  TParallel.&For(1, MAXN, procedure(i: integer)
    begin
      if (IsPrime(i) = 1) then
      begin // memory barrier
        AtomicIncrement(s);
      end
    end);
  Result := s;
end;

function Test3: integer;
var
  s: integer;
begin
  s := 0;
  TParallel.&For(1, MAXN, procedure(i: integer)
    begin
      AtomicIncrement(s, IsPrime(i));
    end);
  Result := s;
end;

begin
  try
    // serial version
    starttime := TThread.GetTickCount;
    s := 0;
    for i := 1 to MAXN do
    begin
      Inc(s, IsPrime(i));
    end;
    serial := TThread.GetTickCount - starttime;
    Writeln(s);

    starttime := TThread.GetTickCount;
    s := Test(1, MAXN);
    parallel1 := TThread.GetTickCount - starttime;
    Writeln(s);

    starttime := TThread.GetTickCount;
    s := Test2;
    parallel2 := TThread.GetTickCount - starttime;
    Writeln(s);

    starttime := TThread.GetTickCount;
    s := Test3;
    parallel3 := TThread.GetTickCount - starttime;
    Writeln(s);

    Writeln('Serial = ', serial);
    Writeln('Parallel1 = ', parallel1);
    Writeln('Parallel2 = ', parallel2);
    Writeln('Parallel3 = ', parallel3);
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.
